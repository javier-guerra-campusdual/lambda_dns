name: Deploy DNS Updater

on:
  push:
    branches: [ main ]
  #pull_request:
    #branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3
  TERRAFORM_VERSION: 1.5.0
  PYTHON_VERSION: 3.13

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov boto3 moto
        pip install -r src/lambda/dns_updater/requirements.txt
    
    #- name: Run tests
    #  run: |
    #   pytest src/tests/ --cov=src/lambda/dns_updater --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  deploy:
    name: Deploy Infrastructure
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: [dev, prod]
        include:
          - environment: dev
            aws_role: arn:aws:iam::${{ secrets.AWS_DEV_ACCOUNT }}:role/github-actions
            branch: develop
          - environment: prod
            aws_role: arn:aws:iam::${{ secrets.AWS_PROD_ACCOUNT }}:role/github-actions
            branch: main
    
    environment:
      name: ${{ matrix.environment }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ matrix.aws_role }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Prepare Lambda Package
      run: |
        cd src/lambda/dns_updater
        pip install -r requirements.txt -t .
        cd ../../..
        zip -r infrastructure/terraform/lambda.zip src/lambda/dns_updater/* -x "*__pycache__*" "*.pyc"
    
    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
    
    - name: Terraform Plan
      working-directory: infrastructure/terraform
      run: |
        terraform plan \
          -var="environment=${{ matrix.environment }}" \
          -var="hosted_zone_id=${{ secrets.HOSTED_ZONE_ID }}" \
          -out=tfplan
    
    - name: Terraform Apply
      if: github.ref == format('refs/heads/{0}', matrix.branch)
      working-directory: infrastructure/terraform
      run: terraform apply -auto-approve tfplan

    - name: Clean up
      if: always()
      run: |
        rm -f infrastructure/terraform/lambda.zip
        rm -f infrastructure/terraform/tfplan